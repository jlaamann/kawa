erDiagram
   clients {
        binary_id id PK
        string name UK "Unique client identifier"
        string version
        string status "connected|disconnected|error"
        datetime last_heartbeat_at
        jsonb connection_metadata
        jsonb capabilities "Client feature flags"
        jsonb last_metrics "Latest CPU, memory, saga count, etc"
        integer heartbeat_interval_ms "Expected heartbeat frequency"
        datetime registered_at
        string api_key_hash UK "SHA256 hash of API key for authentication"
        string environment "dev|staging|prod, used in API key generation"
        string api_key_prefix "First 8 chars of API key for identification"
        datetime inserted_at
        datetime updated_at
    }

    workflow_definitions {
        binary_id id PK
        string name
        string version
        binary_id client_id FK
        string module_name
        jsonb definition
        string definition_checksum "MD5 hash for change detection"
        integer default_timeout_ms
        jsonb default_retry_policy
        boolean is_active
        jsonb validation_errors
        datetime registered_at
        datetime inserted_at
        datetime updated_at
    }

    sagas {
        binary_id id PK
        binary_id workflow_definition_id FK
        binary_id client_id FK
        string correlation_id UK "External tracking ID"
        string status "pending|running|paused|completed|failed|compensating|compensated"
        jsonb input "Initial workflow input"
        jsonb context "Accumulated context from steps"
        jsonb metadata "User-defined metadata"
        datetime started_at
        datetime completed_at
        datetime paused_at
        datetime timeout_at
        integer total_retry_count
        datetime inserted_at
        datetime updated_at
    }

    saga_steps {
        binary_id id PK
        binary_id saga_id FK
        string step_id "Human-readable step identifier (e.g. 'reserve_inventory')"
        string status "pending|running|completed|failed|compensating|compensated|skipped"
        string step_type "action|compensation"
        jsonb input "Input data for this step"
        jsonb output "Output data from step execution"
        jsonb error_details "Structured error information"
        datetime started_at
        datetime completed_at
        datetime timeout_at
        integer retry_count
        array depends_on "Step IDs this step depends on"
        jsonb execution_metadata "Timing, client info, etc"
        datetime inserted_at
        datetime updated_at
    }

    saga_events {
        binary_id id PK
        binary_id saga_id FK
        bigint sequence_number "Auto-incrementing per saga"
        string event_type "saga_started|step_started|step_completed|step_failed|saga_completed|saga_failed|compensation_started|etc"
        string step_id "Null for saga-level events"
        jsonb payload "Event-specific data"
        jsonb before_state "State before event (optional)"
        jsonb after_state "State after event (optional)"
        integer duration_ms "For completed events"
        datetime occurred_at
        datetime inserted_at
    }

    workflow_steps {
        binary_id id PK
        binary_id workflow_definition_id FK
        string step_id
        string step_name
        jsonb step_definition "Action, compensation, timeout, etc"
        array depends_on "Step dependencies"
        integer execution_order "Topologically sorted order"
        datetime inserted_at
        datetime updated_at
    }

    clients ||--o{ workflow_definitions : "registers"
    clients ||--o{ sagas : "executes"
    workflow_definitions ||--o{ sagas : "instantiates"
    workflow_definitions ||--o{ workflow_steps : "defines"
    sagas ||--o{ saga_events : "logs"
    sagas ||--o{ saga_steps : "contains"